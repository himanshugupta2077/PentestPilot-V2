import sys
from functools import partial
import os
import json
import uuid
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QSplitter, QLabel, QLineEdit, QComboBox, QPushButton, QMessageBox, QListWidget, QListWidgetItem, QSizePolicy, QDialog, QDialogButtonBox, QTreeWidget, QTreeWidgetItem, QHeaderView, QFrame, QFormLayout
)
from PyQt6.QtCore import Qt, QSize
from PyQt6.QtGui import QIcon

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("PyQt6 Splitter Example")
        self.setGeometry(100, 100, 800, 600)
        self.setWindowState(Qt.WindowState.WindowMaximized)

        # Main Layout
        main_layout = QHBoxLayout()

        # Left Section
        self.left_section = QWidget()
        # self.left_section.setStyleSheet("background-color: lightblue;")

        # Split Left Section into Top and Bottom
        self.left_top_section = QWidget()
        # self.left_top_section.setStyleSheet("background-color: lightcoral;")
        left_top_layout = QVBoxLayout()

        # Create Project Form
        form_layout = QVBoxLayout()

        # Add "Create Project" heading
        create_project_label = QLabel('<b>Create Project</b>')
        create_project_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        form_layout.addWidget(create_project_label)

        form_layout.setSpacing(10)

        # Project Name
        self.project_name_input = QLineEdit()
        form_layout.addWidget(QLabel('Project Name:'))
        form_layout.addWidget(self.project_name_input)

        # Project Type
        self.project_type_input = QComboBox()
        self.project_type_input.addItems(['web', 'api', 'network', 'mobile'])
        form_layout.addWidget(QLabel('Project Type:'))
        form_layout.addWidget(self.project_type_input)

        # Create Button
        self.create_button = QPushButton('Create Project')
        self.create_button.clicked.connect(self.create_project)
        form_layout.addWidget(self.create_button)

        left_top_layout.addLayout(form_layout)
        self.left_top_section.setLayout(left_top_layout)

        self.left_bottom_section = QWidget()
        # self.left_bottom_section.setStyleSheet("background-color: lightblue;")
        left_bottom_layout = QVBoxLayout()

        # Scope Tree
        self.scope_tree = QTreeWidget()

        self.scope_tree.setHeaderLabels(['Title', 'Value', '', '', ''])
        header = self.scope_tree.header()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.Interactive)  # Scope Name
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Interactive)  # Scope Type
        # header.setSectionResizeMode(2, QHeaderView.ResizeMode.Interactive)  # Scope Type
        # header.setSectionResizeMode(3, QHeaderView.ResizeMode.Interactive)  # Scope Type
        # header.setSectionResizeMode(4, QHeaderView.ResizeMode.Interactive)  # Scope Type

        # Optional: Set initial column widths
        header.resizeSection(0, 350)
        header.resizeSection(1, 780)
        # header.resizeSection(2, 120)
        # header.resizeSection(3, 120)
        # header.resizeSection(4, 100)

        self.ongoing_label = QLabel('<b>Scope</b>')
        self.ongoing_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        left_bottom_layout.addWidget(self.ongoing_label)
        left_bottom_layout.addWidget(self.scope_tree)
        self.left_bottom_section.setLayout(left_bottom_layout)

        # Splitter for Left Section
        self.left_splitter = QSplitter(Qt.Orientation.Vertical)
        self.left_splitter.addWidget(self.left_top_section)
        self.left_splitter.addWidget(self.left_bottom_section)

        # Right Section
        self.right_section = QWidget()
        # self.right_section.setStyleSheet("background-color: lightgreen;")
        right_layout = QVBoxLayout()

        # Ongoing Projects
        self.ongoing_label = QLabel('<b>Ongoing Projects</b>')
        self.ongoing_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.ongoing_list = QListWidget()
        self.ongoing_list.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        right_layout.addWidget(self.ongoing_label)
        right_layout.addWidget(self.ongoing_list)

        # Add a horizontal line between sections
        right_layout.addWidget(QFrame(frameShape=QFrame.Shape.HLine, frameShadow=QFrame.Shadow.Sunken))

        # Archived Projects
        self.archived_label = QLabel('<b>Archived Projects</b>')
        self.archived_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.archived_list = QListWidget()
        self.archived_list.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        right_layout.addWidget(self.archived_label)
        right_layout.addWidget(self.archived_list)

        self.right_section.setLayout(right_layout)

        # Main Splitter
        self.main_splitter = QSplitter(Qt.Orientation.Horizontal)
        self.main_splitter.addWidget(self.left_splitter)
        self.main_splitter.addWidget(self.right_section)

        # Set initial sizes (hardcoded)
        self.main_splitter.setSizes([400])  # Left and Right sections
        self.left_splitter.setSizes([1, 700])  # Left Top and Left Bottom sections

        main_layout.addWidget(self.main_splitter)

        container = QWidget()
        container.setLayout(main_layout)
        self.setCentralWidget(container)

        self.projects = self.load_projects()
        self.update_recent_projects()

    def create_project(self):
        project_name = self.project_name_input.text()
        project_type = self.project_type_input.currentText()

        if not project_name:
            QMessageBox.warning(self, 'Input Error', 'Project Name is required!')
            return

        # Generate a unique UUID for the project
        project_uuid = str(uuid.uuid4())

        # Create the project directory with a unique ID
        project_dir = os.path.join(os.getcwd(), 'projects', f"{project_name}_{project_uuid[:8]}")
        os.makedirs(project_dir, exist_ok=True)

        # Create the project details JSON
        project_details = {
            'project_id': project_uuid,
            'project_name': project_name,
            'project_type': project_type,
            'status': 'ongoing',
            'created_at': self.get_current_time(),
            'scopes': []
        }

        project_json_path = os.path.join(project_dir, 'project_details.json')
        with open(project_json_path, 'w') as json_file:
            json.dump(project_details, json_file, indent=4)

        QMessageBox.information(self, 'Success', f'Project "{project_name}" created successfully!')

        # Update the projects list
        self.projects.append(project_details)
        self.update_recent_projects()

    def update_recent_projects(self):
        self.ongoing_list.clear()
        self.archived_list.clear()
        self.update_scope_tree()
        
        for project in self.projects:
            item = QListWidgetItem()
            project_widget = self.create_project_widget(project)
            item.setSizeHint(project_widget.sizeHint())
            
            if project['status'] == 'ongoing':
                self.ongoing_list.addItem(item)
                self.ongoing_list.setItemWidget(item, project_widget)
            elif project['status'] == 'archived':
                self.archived_list.addItem(item)
                self.archived_list.setItemWidget(item, project_widget)

    def create_project_widget(self, project):
        project_layout = QHBoxLayout()

        project_label = QLabel(f"{project['project_name']} ({project['project_type']})")
        project_layout.addWidget(project_label)

        toggle_button = QPushButton()
        toggle_button.setIcon(QIcon.fromTheme("edit-undo"))
        toggle_button.setFixedSize(QSize(30, 30))
        toggle_button.clicked.connect(lambda: self.toggle_project_status(project))
        project_layout.addWidget(toggle_button)

        edit_button = QPushButton("Edit")
        edit_button.setFixedSize(QSize(50, 30))
        edit_button.clicked.connect(lambda: self.edit_project(project))
        project_layout.addWidget(edit_button)

        open_dir_button = QPushButton()
        open_dir_button.setIcon(QIcon.fromTheme("folder"))
        open_dir_button.setFixedSize(QSize(30, 30))
        open_dir_button.clicked.connect(lambda: self.open_project_dir(project))
        project_layout.addWidget(open_dir_button)

        add_scope_button = QPushButton(" + Scope ")
        add_scope_button.setFixedSize(QSize(70, 30))
        add_scope_button.clicked.connect(lambda: self.add_scope_to_project(project))
        project_layout.addWidget(add_scope_button)

        project_widget = QWidget()
        project_widget.setLayout(project_layout)

        return project_widget

    def toggle_project_status(self, project):
        project_dir = os.path.join(os.getcwd(), 'projects', f"{project['project_name']}_{project['project_id'][:8]}")
        project_json_path = os.path.join(project_dir, 'project_details.json')

        if project['status'] == 'ongoing':
            project['status'] = 'archived'
        elif project['status'] == 'archived':
            project['status'] = 'ongoing'

        with open(project_json_path, 'w') as json_file:
            json.dump(project, json_file, indent=4)

        self.update_recent_projects()

    def edit_project(self, project):
        dialog = QDialog(self)
        dialog.setWindowTitle('Edit Project')
        dialog_layout = QVBoxLayout()

        form_layout = QFormLayout()
        form_layout.setLabelAlignment(Qt.AlignmentFlag.AlignRight)
        form_layout.setFormAlignment(Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignTop)
        form_layout.setSpacing(10)

        # Project Name
        project_name_input = QLineEdit(project['project_name'])
        form_layout.addRow('Project Name:', project_name_input)

        # Project Type
        project_type_input = QComboBox()
        project_type_input.addItems(['web', 'api', 'network', 'mobile'])
        project_type_input.setCurrentText(project['project_type'])
        form_layout.addRow('Project Type:', project_type_input)

        dialog_layout.addLayout(form_layout)

        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Save | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(lambda: self.save_edited_project(project, project_name_input.text(), project_type_input.currentText(), dialog))
        button_box.rejected.connect(dialog.reject)
        dialog_layout.addWidget(button_box)

        dialog.setLayout(dialog_layout)
        dialog.exec()

    def save_edited_project(self, project, new_name, new_type, dialog):
        if not new_name:
            QMessageBox.warning(self, 'Input Error', 'Project Name is required!')
            return

        old_project_dir = os.path.join(os.getcwd(), 'projects', f"{project['project_name']}_{project['project_id'][:8]}")
        new_project_dir = os.path.join(os.getcwd(), 'projects', f"{new_name}_{project['project_id'][:8]}")
        project_json_path = os.path.join(old_project_dir, 'project_details.json')

        if old_project_dir != new_project_dir:
            os.rename(old_project_dir, new_project_dir)

        project['project_name'] = new_name
        project['project_type'] = new_type

        with open(os.path.join(new_project_dir, 'project_details.json'), 'w') as json_file:
            json.dump(project, json_file, indent=4)

        self.update_recent_projects()
        dialog.accept()

    def open_project_dir(self, project):
        project_dir = os.path.join(os.getcwd(), 'projects', f"{project['project_name']}_{project['project_id'][:8]}")
        if os.path.exists(project_dir):
            os.startfile(project_dir)

    def add_scope_to_project(self, project):
        dialog = QDialog(self)
        dialog.setWindowTitle('Add Scope')
        dialog_layout = QVBoxLayout()

        form_layout = QFormLayout()
        form_layout.setLabelAlignment(Qt.AlignmentFlag.AlignRight)
        form_layout.setFormAlignment(Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignTop)
        form_layout.setSpacing(10)

        # Scope Name
        scope_name_input = QLineEdit()
        form_layout.addRow('Scope Name:', scope_name_input)

        # Scope Type
        scope_type_input = QComboBox()
        scope_type_input.addItems(['Scope', 'Module', 'URL', 'IP', 'Service', 'Port', 'File Path', 'Vulnerability'])
        form_layout.addRow('Scope Type:', scope_type_input)

        # Scope Value
        scope_value_input = QLineEdit()
        form_layout.addRow('Scope Value:', scope_value_input)

        dialog_layout.addLayout(form_layout)

        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Save | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(lambda: self.save_scope(project, scope_name_input.text(), scope_type_input.currentText(), scope_value_input.text(), dialog))
        button_box.rejected.connect(dialog.reject)
        dialog_layout.addWidget(button_box)

        dialog.setLayout(dialog_layout)
        dialog.exec()

    def save_scope(self, project, scope_name, scope_type, scope_value, dialog):
        if not scope_name or not scope_value:
            QMessageBox.warning(self, 'Input Error', 'Scope Name and Scope Value are required!')
            return

        project_dir = os.path.join(os.getcwd(), 'projects', f"{project['project_name']}_{project['project_id'][:8]}")
        project_json_path = os.path.join(project_dir, 'project_details.json')

        # Generate a unique UUID for the scope
        scope_uuid = str(uuid.uuid4())

        project['scopes'].append({
            'uuid': scope_uuid,  # Add UUID to the scope
            'name': scope_name,
            'type': scope_type,
            'value': scope_value,  # Add the new scope value field
            'assets': []
        })

        with open(project_json_path, 'w') as json_file:
            json.dump(project, json_file, indent=4)

        self.update_recent_projects()
        dialog.accept()

    def load_projects(self):
        projects_dir = os.path.join(os.getcwd(), 'projects')
        projects = []

        if os.path.exists(projects_dir):
            for project_name in os.listdir(projects_dir):
                project_path = os.path.join(projects_dir, project_name)
                if os.path.isdir(project_path):
                    project_json_path = os.path.join(project_path, 'project_details.json')
                    if os.path.exists(project_json_path):
                        with open(project_json_path, 'r') as json_file:
                            project_details = json.load(json_file)
                            projects.append(project_details)

        return projects

    def get_current_time(self):
        import datetime
        return datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    def update_scope_tree(self):
        self.scope_tree.clear()
        for project in self.projects:
            project_item = QTreeWidgetItem(self.scope_tree, ["Project: " + project['project_name'], "", "", "", ""])
            
            # Make the project item text bold
            font = project_item.font(0)
            font.setBold(True)
            project_item.setFont(0, font)
            
            # Add "Add Scope" button
            add_scope_button = QPushButton("Add Scope")
            add_scope_button.clicked.connect(partial(self.add_scope_to_project, project))
            self.scope_tree.setItemWidget(project_item, 2, add_scope_button)
            
            # Add "Edit" button
            edit_button = QPushButton("Edit")
            edit_button.clicked.connect(partial(self.edit_project, project))
            self.scope_tree.setItemWidget(project_item, 4, edit_button)
        
            for scope in project['scopes']:
                if scope['name'] == "-":
                    scope_item = QTreeWidgetItem(project_item, [scope['type'], scope['value']])
                else:
                    scope_item = QTreeWidgetItem(project_item, [scope['type']+' ('+ scope['name']+")", scope['value']])
                
                # Add "Add Asset" button
                add_asset_button = QPushButton("Add Asset")
                add_asset_button.clicked.connect(lambda _, s=scope: self.add_asset_to_scope(project, s))
                self.scope_tree.setItemWidget(scope_item, 2, add_asset_button)
                
                # Add "Delete" button
                delete_scope_button = QPushButton("Delete")
                delete_scope_button.clicked.connect(lambda _, p=project, s=scope: self.delete_scope(p, s))
                self.scope_tree.setItemWidget(scope_item, 3, delete_scope_button)
                
                # Add "Edit" button
                edit_scope_button = QPushButton("Edit")
                edit_scope_button.clicked.connect(lambda _, p=project, s=scope: self.edit_scope(p, s))
                self.scope_tree.setItemWidget(scope_item, 4, edit_scope_button)
                
                project_item.addChild(scope_item)
                
                for asset in scope['assets']:
                    if asset['name'] == "-":
                        asset_item = QTreeWidgetItem(scope_item, [asset['type'], asset['value']])
                    else:
                        asset_item = QTreeWidgetItem(scope_item, [asset['type']+' ('+asset['name']+") ", asset['value']])
                    
                    # Add "Delete" button for asset
                    delete_asset_button = QPushButton("Delete")
                    delete_asset_button.clicked.connect(lambda _, p=project, s=scope, a=asset: self.delete_asset(p, s, a))
                    self.scope_tree.setItemWidget(asset_item, 3, delete_asset_button)
                    
                    # Add "Edit" button for asset
                    edit_asset_button = QPushButton("Edit")
                    edit_asset_button.clicked.connect(lambda _, p=project, s=scope, a=asset: self.edit_asset(p, s, a))
                    self.scope_tree.setItemWidget(asset_item, 4, edit_asset_button)
                    self.scope_tree.expandAll()
                    scope_item.addChild(asset_item)

    def delete_asset(self, project, scope, asset):
        confirm = QMessageBox.question(self, 'Confirm Delete', f'Are you sure you want to delete asset "{asset["name"]}"?', QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
        if confirm == QMessageBox.StandardButton.Yes:
            project_dir = os.path.join(os.getcwd(), 'projects', f"{project['project_name']}_{project['project_id'][:8]}")
            project_json_path = os.path.join(project_dir, 'project_details.json')

            # Remove the asset from the scope's assets list
            scope['assets'] = [a for a in scope['assets'] if a['uuid'] != asset['uuid']]

            with open(project_json_path, 'w') as json_file:
                json.dump(project, json_file, indent=4)

            self.update_recent_projects()

    def edit_asset(self, project, scope, asset):
        dialog = QDialog(self)
        dialog.setWindowTitle('Edit Asset')
        dialog_layout = QVBoxLayout()

        form_layout = QFormLayout()
        form_layout.setLabelAlignment(Qt.AlignmentFlag.AlignRight)
        form_layout.setFormAlignment(Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignTop)
        form_layout.setSpacing(10)

        # Asset Name
        asset_name_input = QLineEdit(asset['name'])
        form_layout.addRow('Asset Name:', asset_name_input)

        # Asset Type
        asset_type_input = QComboBox()
        asset_type_input.addItems(['Scope', 'Module', 'URL', 'IP', 'Service', 'Port', 'File Path', 'Vulnerability'])
        asset_type_input.setCurrentText(asset['type'])
        form_layout.addRow('Asset Type:', asset_type_input)

        # Asset Value
        asset_value_input = QLineEdit(asset['value'])
        form_layout.addRow('Asset Value:', asset_value_input)

        dialog_layout.addLayout(form_layout)

        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Save | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(lambda: self.save_edited_asset(project, scope, asset, asset_name_input.text(), asset_type_input.currentText(), asset_value_input.text(), dialog))
        button_box.rejected.connect(dialog.reject)
        dialog_layout.addWidget(button_box)

        dialog.setLayout(dialog_layout)
        dialog.exec()

    # Update the save_edited_asset method signature to accept the new parameter
    def save_edited_asset(self, project, scope, asset, new_name, new_type, new_value, dialog):
        if not new_name:
            QMessageBox.warning(self, 'Input Error', 'Asset Name is required!')
            return

        project_dir = os.path.join(os.getcwd(), 'projects', f"{project['project_name']}_{project['project_id'][:8]}")
        project_json_path = os.path.join(project_dir, 'project_details.json')

        # Update the asset details
        asset['name'] = new_name
        asset['type'] = new_type
        asset['value'] = new_value  # Update the asset value

        with open(project_json_path, 'w') as json_file:
            json.dump(project, json_file, indent=4)

        self.update_recent_projects()
        dialog.accept()

    def delete_scope(self, project, scope):
        confirm = QMessageBox.question(self, 'Confirm Delete', f'Are you sure you want to delete scope "{scope["name"]}"?', QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
        if confirm == QMessageBox.StandardButton.Yes:
            project_dir = os.path.join(os.getcwd(), 'projects', f"{project['project_name']}_{project['project_id'][:8]}")
            project_json_path = os.path.join(project_dir, 'project_details.json')

            # Remove the scope from the project's scopes list
            project['scopes'] = [s for s in project['scopes'] if s['uuid'] != scope['uuid']]

            with open(project_json_path, 'w') as json_file:
                json.dump(project, json_file, indent=4)

            self.update_recent_projects()

    def edit_scope(self, project, scope):
        dialog = QDialog(self)
        dialog.setWindowTitle('Edit Scope')
        dialog_layout = QVBoxLayout()

        form_layout = QFormLayout()
        form_layout.setLabelAlignment(Qt.AlignmentFlag.AlignRight)
        form_layout.setFormAlignment(Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignTop)
        form_layout.setSpacing(10)

        # Scope Name
        scope_name_input = QLineEdit(scope['name'])
        form_layout.addRow('Scope Name:', scope_name_input)

        # Scope Type
        scope_type_input = QComboBox()
        scope_type_input.addItems(['Scope', 'Module', 'URL', 'IP', 'Service', 'Port', 'File Path', 'Vulnerability'])  # Ensure consistency with scope types
        scope_type_input.setCurrentText(scope['type'])
        form_layout.addRow('Scope Type:', scope_type_input)

        # Scope Value
        scope_value_input = QLineEdit(scope['value'])
        form_layout.addRow('Scope Value:', scope_value_input)

        dialog_layout.addLayout(form_layout)

        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Save | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(lambda: self.save_edited_scope(project, scope, scope_name_input.text(), scope_type_input.currentText(), scope_value_input.text(), dialog))
        button_box.rejected.connect(dialog.reject)
        dialog_layout.addWidget(button_box)

        dialog.setLayout(dialog_layout)
        dialog.exec()

    def save_edited_scope(self, project, scope, new_name, new_type, new_value, dialog):
        if not new_name or not new_value:
            QMessageBox.warning(self, 'Input Error', 'Scope Name and Scope Value are required!')
            return

        project_dir = os.path.join(os.getcwd(), 'projects', f"{project['project_name']}_{project['project_id'][:8]}")
        project_json_path = os.path.join(project_dir, 'project_details.json')

        # Update the scope details
        scope['name'] = new_name
        scope['type'] = new_type
        scope['value'] = new_value  # Update the scope value

        with open(project_json_path, 'w') as json_file:
            json.dump(project, json_file, indent=4)

        self.update_recent_projects()
        dialog.accept()

    def add_asset_to_scope(self, project, scope):
        dialog = QDialog(self)
        dialog.setWindowTitle('Add Asset')
        dialog_layout = QVBoxLayout()

        form_layout = QFormLayout()
        form_layout.setLabelAlignment(Qt.AlignmentFlag.AlignRight)
        form_layout.setFormAlignment(Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignTop)
        form_layout.setSpacing(10)

        # Asset Name
        asset_name_input = QLineEdit()
        form_layout.addRow('Asset Name:', asset_name_input)

        # Asset Type
        asset_type_input = QComboBox()
        asset_type_input.addItems(['Scope', 'Module', 'URL', 'IP', 'Service', 'Port', 'File Path', 'Vulnerability'])
        form_layout.addRow('Asset Type:', asset_type_input)

        # Asset Value
        asset_value_input = QLineEdit()
        form_layout.addRow('Asset Value:', asset_value_input)

        dialog_layout.addLayout(form_layout)

        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Save | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(lambda: self.save_asset(project, scope, asset_name_input.text(), asset_type_input.currentText(), asset_value_input.text(), dialog))
        button_box.rejected.connect(dialog.reject)
        dialog_layout.addWidget(button_box)

        dialog.setLayout(dialog_layout)
        dialog.exec()

    def save_asset(self, project, scope, asset_name, asset_type, asset_value, dialog):
        if not asset_name:
            QMessageBox.warning(self, 'Input Error', 'Asset Name is required!')
            return

        project_dir = os.path.join(os.getcwd(), 'projects', f"{project['project_name']}_{project['project_id'][:8]}")
        project_json_path = os.path.join(project_dir, 'project_details.json')

        # Generate a unique UUID for the asset
        asset_uuid = str(uuid.uuid4())

        scope['assets'].append({
            'uuid': asset_uuid,  # Add UUID to the asset
            'name': asset_name,
            'type': asset_type,
            'value': asset_value  # Include the asset value
        })

        with open(project_json_path, 'w') as json_file:
            json.dump(project, json_file, indent=4)

        self.update_recent_projects()
        dialog.accept()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())