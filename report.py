import sys
import os
import json
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QSplitter, QLabel, QTreeWidget, QTreeWidgetItem, QComboBox,
    QPushButton, QMessageBox, QInputDialog
)
from PyQt6.QtCore import Qt

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setGeometry(100, 100, 800, 600)
        self.showMaximized()

        # Set the title of the window
        self.setWindowTitle("Project Viewer")

        # Create the main widget and layout
        main_widget = QWidget()
        main_layout = QVBoxLayout()
        main_widget.setLayout(main_layout)
        self.setCentralWidget(main_widget)

        # Top Header Section
        top_header = QWidget()
        top_header_layout = QHBoxLayout()
        top_header.setLayout(top_header_layout)

        self.project_name_label = QLabel("Project Name: ")
        self.project_type_label = QLabel("Project Type: ")
        self.created_at_label = QLabel("Started Date: ")

        top_header_layout.addWidget(self.project_name_label)
        top_header_layout.addWidget(self.project_type_label)
        top_header_layout.addWidget(self.created_at_label)

        self.project_dropdown = QComboBox()
        self.project_dropdown.currentTextChanged.connect(self.load_project_data)
        top_header_layout.addWidget(self.project_dropdown)

        top_header.setMinimumHeight(50)  # Minimum height for the top header
        main_layout.addWidget(top_header)

        # Bottom Section with Left and Right Parts
        bottom_splitter = QSplitter(Qt.Orientation.Horizontal)

        # Left Section (Tree Widget)
        self.tree_widget = QTreeWidget()
        self.tree_widget.setHeaderLabels(["Details", "Actions", ""])  # Add a second column for actions
        bottom_splitter.addWidget(self.tree_widget)

        # Right Section (Placeholder)
        right_section = QLabel("Right Section")
        right_section.setMinimumWidth(200)  # Minimum width for the right section
        bottom_splitter.addWidget(right_section)

        # Set initial sizes for the left and right sections
        bottom_splitter.setSizes([400, 200])  # Initial sizes in pixels

        # Add the splitter to the main layout
        main_layout.addWidget(bottom_splitter)

        # Add a vertical splitter for resizing between top header and bottom sections
        vertical_splitter = QSplitter(Qt.Orientation.Vertical)
        vertical_splitter.addWidget(top_header)
        vertical_splitter.addWidget(bottom_splitter)

        # Set initial sizes for the top and bottom sections
        vertical_splitter.setSizes([100, 500])  # Initial sizes in pixels

        # Replace the main layout with the vertical splitter
        main_layout.addWidget(vertical_splitter)

        # Load project directories and populate dropdown
        self.load_projects()

    def load_projects(self):
        projects_dir = "projects"
        if os.path.exists(projects_dir):
            project_folders = [d for d in os.listdir(projects_dir) if os.path.isdir(os.path.join(projects_dir, d))]
            self.project_dropdown.addItems(project_folders)

    def load_project_data(self, project_name):
        if not project_name:
            return

        project_dir = os.path.join("projects", project_name)
        project_details_path = os.path.join(project_dir, "project_details.json")
        issues_path = os.path.join(project_dir, "issues.json")
        testcase_details_path = os.path.join(project_dir, "testcase_details.json")

        if not os.path.exists(project_details_path) or not os.path.exists(issues_path) or not os.path.exists(testcase_details_path):
            return

        with open(project_details_path, "r") as f:
            project_data = json.load(f)

        with open(issues_path, "r") as f:
            self.issues_data = json.load(f)

        with open(testcase_details_path, "r") as f:
            testcase_data = json.load(f)

        self.project_name_label.setText(f"Project Name: {project_data['project_name']}")
        self.project_type_label.setText(f"Project Type: {project_data['project_type']}")
        self.created_at_label.setText(f"Started Date: {project_data['created_at']}")

        self.tree_widget.clear()

        for issue in self.issues_data:
            group_item = QTreeWidgetItem(self.tree_widget)
            group_item.setText(0, issue["group_name"])  # Add group name to the first column

            # Add delete button to the second column
            delete_button = QPushButton("Delete")
            delete_button.clicked.connect(lambda _, item=group_item, group_name=issue["group_name"]: self.delete_group(item, group_name))
            self.tree_widget.setItemWidget(group_item, 1, delete_button)  # Place button in the second column

            # Add edit button to the second column
            edit_button = QPushButton("Edit")
            edit_button.clicked.connect(lambda _, item=group_item, group_name=issue["group_name"]: self.edit_group(item, group_name))
            self.tree_widget.setItemWidget(group_item, 2, edit_button)  # Place button in the third column

            # Handle groups with no test cases
            if "test_cases" in issue and issue["test_cases"]:
                for test_case_uuid in issue["test_cases"]:
                    for asset_uuid, test_cases in testcase_data.items():
                        for test_case in test_cases:
                            if test_case["uuid"] == test_case_uuid:
                                test_case_item = QTreeWidgetItem(group_item)
                                test_case_item.setText(0, test_case["title"])
                                break
            else:
                # Add a placeholder for groups with no test cases
                no_test_case_item = QTreeWidgetItem(group_item)
                no_test_case_item.setText(0, "No test cases available")

        self.tree_widget.expandAll()

    def delete_group(self, item, group_name):
        # Show confirmation dialog
        confirm = QMessageBox.question(self, "Confirm Deletion", f"Are you sure you want to delete the group '{group_name}'?", QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No, QMessageBox.StandardButton.No)
        if confirm == QMessageBox.StandardButton.Yes:
            # Remove the group from issues_data
            self.issues_data = [issue for issue in self.issues_data if issue["group_name"] != group_name]

            # Save the updated issues_data to the JSON file
            project_dir = os.path.join("projects", self.project_dropdown.currentText())
            issues_path = os.path.join(project_dir, "issues.json")
            with open(issues_path, "w") as f:
                json.dump(self.issues_data, f, indent=4)

            # Remove the item from the tree widget
            self.tree_widget.takeTopLevelItem(self.tree_widget.indexOfTopLevelItem(item))

    def edit_group(self, item, group_name):
        # Show input dialog to edit the group name
        new_group_name, ok = QInputDialog.getText(self, "Edit Group Name", "Enter new group name:", text=group_name)
        if ok and new_group_name:
            # Update the group name in issues_data
            for issue in self.issues_data:
                if issue["group_name"] == group_name:
                    issue["group_name"] = new_group_name
                    break

            # Save the updated issues_data to the JSON file
            project_dir = os.path.join("projects", self.project_dropdown.currentText())
            issues_path = os.path.join(project_dir, "issues.json")
            with open(issues_path, "w") as f:
                json.dump(self.issues_data, f, indent=4)

            # Update the group name in the tree widget
            item.setText(0, new_group_name)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())